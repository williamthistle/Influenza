if(aliquot_subject_metadata$scRNA_seq == TRUE) {
if(subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Pass" | subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Good") {
total_D1_passing_scRNA <- c(total_D1_passing_scRNA, aliquot_id)
total_D1_passing_scRNA_sex <- c(total_D1_passing_scRNA_sex, current_sex)
} else {
total_D1_failing <- c(total_D1_failing, aliquot_id)
total_D1_failing_sex <- c(total_D1_failing_sex, current_sex)
}
} else if(aliquot_subject_metadata$multiome == TRUE) {
total_D1_passing_multiome <- c(total_D1_passing_multiome, aliquot_id)
total_D1_passing_multiome_sex <- c(total_D1_passing_multiome_sex, current_sex)
}
} else if(aliquot_subject_metadata$time_point == "2_D28") {
if(aliquot_subject_metadata$scRNA_seq == TRUE) {
if(subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Pass" | subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Good") {
total_D28_passing_scRNA <- c(total_D28_passing_scRNA, aliquot_id)
total_D28_passing_scRNA_sex <- c(total_D28_passing_scRNA_sex, current_sex)
} else {
total_D28_failing <- c(total_D28_failing, aliquot_id)
total_D28_failing_sex <- c(total_D28_failing_sex, current_sex)
}
} else if(aliquot_subject_metadata$multiome == TRUE) {
total_D28_passing_multiome <- c(total_D28_passing_multiome, aliquot_id)
total_D28_passing_multiome_sex <- c(total_D28_passing_multiome_sex, current_sex)
}
}
}
}
print("### BREAKDOWN OF SUBJECTS ###")
# Add scRNA-seq full pass subjects and multiome full pass subjects
print(paste0("Total full pass scRNA subjects (D-1 and D28): ", length(total_full_pass_subjects_scRNA), " (", sum(total_full_pass_subjects_scRNA_sex == "M"), " Male, ", sum(total_full_pass_subjects_scRNA_sex == "F"), " Female)"))
print(paste0("Total full pass multiome subjects (D-1 and D28): ", length(total_full_pass_subjects_multiome), " (", sum(total_full_pass_subjects_multiome_sex == "M"), " Male, ", sum(total_full_pass_subjects_multiome_sex == "F"), " Female)"))
total_full_pass_subjects <- length(total_full_pass_subjects_scRNA) + length(total_full_pass_subjects_multiome)
total_full_pass_subjects_male <- sum(total_full_pass_subjects_scRNA_sex == "M") + sum(total_full_pass_subjects_multiome_sex == "M")
total_full_pass_subjects_female <- sum(total_full_pass_subjects_scRNA_sex == "F") + sum(total_full_pass_subjects_multiome_sex == "F")
print(paste0("total full pass subjects (D-1 and D28): ", total_full_pass_subjects, " (", total_full_pass_subjects_male, " Male, ", total_full_pass_subjects_female, " Female)"))
print("### BREAKDOWN OF ALIQUOTS ###")
print(paste0("D1 passing scRNA: ", length(total_D1_passing_scRNA), " (", sum(total_D1_passing_scRNA_sex == "M"), " Male, ", sum(total_D1_passing_scRNA_sex == "F"), " Female)"))
print(paste0("D1 passing true multiome: ", length(total_D1_passing_multiome), " (", sum(total_D1_passing_multiome_sex == "M"), " Male, ", sum(total_D1_passing_multiome_sex == "F"), " Female)"))
D1_total_passing <- length(total_D1_passing_scRNA) + length(total_D1_passing_multiome)
D1_total_passing_male <- sum(total_D1_passing_scRNA_sex == "M") + sum(total_D1_passing_multiome_sex == "M")
D1_total_passing_female <- sum(total_D1_passing_scRNA_sex == "F") + sum(total_D1_passing_multiome_sex == "F")
print(paste0("total D1 passing: ", D1_total_passing, " (", D1_total_passing_male, " Male, ", D1_total_passing_female, " Female)"))
print(paste0("total D1 failing scRNA: ", length(total_D1_failing), " (", sum(total_D1_failing_sex == "M"), " Male, ", sum(total_D1_failing_sex == "F"), " Female)"))
print(paste0("D28 passing scRNA: ", length(total_D28_passing_scRNA), " (", sum(total_D28_passing_scRNA_sex == "M"), " Male, ", sum(total_D28_passing_scRNA_sex == "F"), " Female)"))
print(paste0("D28 passing true multiome: ", length(total_D28_passing_multiome), " (", sum(total_D28_passing_multiome_sex == "M"), " Male, ", sum(total_D28_passing_multiome_sex == "F"), " Female)"))
D28_total_passing <- length(total_D28_passing_scRNA) + length(total_D28_passing_multiome)
D28_total_passing_male <- sum(total_D28_passing_scRNA_sex == "M") + sum(total_D28_passing_multiome_sex == "M")
D28_total_passing_female <- sum(total_D28_passing_scRNA_sex == "F") + sum(total_D28_passing_multiome_sex == "F")
print(paste0("total D28 passing: ", D28_total_passing, " (", D28_total_passing_male, " Male, ", D28_total_passing_female, " Female)"))
print(paste0("total D28 failing scRNA: ", length(total_D28_failing), " (", sum(total_D28_failing_sex == "M"), " Male, ", sum(total_D28_failing_sex == "F"), " Female)"))
}
find_distribution_of_sc_metadata_for_subjects(high_viral_load_subjects, all_metadata)
find_distribution_of_sc_metadata_for_subjects = function(list_of_subjects, metadata) {
total_D1_passing_scRNA <- c()
total_D1_passing_scRNA_sex <- c()
total_D1_passing_multiome <- c()
total_D1_passing_multiome_sex <- c()
total_D1_failing <- c()
total_D1_failing_sex <- c()
total_D28_passing_scRNA <- c()
total_D28_passing_scRNA_sex <- c()
total_D28_passing_multiome <- c()
total_D28_passing_multiome_sex <- c()
total_D28_failing <- c()
total_D28_failing_sex <- c()
total_full_pass_subjects_scRNA <- c()
total_full_pass_subjects_scRNA_sex <- c()
total_full_pass_subjects_multiome <- c()
total_full_pass_subjects_multiome_sex <- c()
for(subject in list_of_subjects) {
subject_metadata <- metadata[metadata$subject_id == subject,]
current_sex <- as.character(subject_metadata$sex[1])
# Check for full pass for current subject
if(sum(subject_metadata$scRNA_seq) == 2 & (sum(subject_metadata$passed_qc_scRNA_seq == "Pass") + sum(subject_metadata$passed_qc_scRNA_seq == "Good")) == 2) {
total_full_pass_subjects_scRNA <- c(total_full_pass_subjects_scRNA, subject)
total_full_pass_subjects_scRNA_sex <- c(total_full_pass_subjects_scRNA_sex, current_sex)
} else if(sum(subject_metadata$multiome) == 2) {
total_full_pass_subjects_multiome <- c(total_full_pass_subjects_multiome, subject)
total_full_pass_subjects_multiome_sex <- c(total_full_pass_subjects_multiome_sex, current_sex)
}
for(aliquot_id in subject_metadata$aliquot_id) {
aliquot_subject_metadata <- subject_metadata[subject_metadata$aliquot_id == aliquot_id,]
current_sex <- as.character(aliquot_subject_metadata$sex)
if(aliquot_subject_metadata$time_point == "2_D_minus_1") {
if(aliquot_subject_metadata$scRNA_seq == TRUE) {
if(subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Pass" | subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Good") {
total_D1_passing_scRNA <- c(total_D1_passing_scRNA, aliquot_id)
total_D1_passing_scRNA_sex <- c(total_D1_passing_scRNA_sex, current_sex)
} else {
total_D1_failing <- c(total_D1_failing, aliquot_id)
total_D1_failing_sex <- c(total_D1_failing_sex, current_sex)
}
} else if(aliquot_subject_metadata$multiome == TRUE) {
total_D1_passing_multiome <- c(total_D1_passing_multiome, aliquot_id)
total_D1_passing_multiome_sex <- c(total_D1_passing_multiome_sex, current_sex)
}
} else if(aliquot_subject_metadata$time_point == "2_D28") {
if(aliquot_subject_metadata$scRNA_seq == TRUE) {
if(subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Pass" | subject_metadata[subject_metadata$aliquot_id == aliquot_id,]$passed_qc_scRNA_seq  == "Good") {
total_D28_passing_scRNA <- c(total_D28_passing_scRNA, aliquot_id)
total_D28_passing_scRNA_sex <- c(total_D28_passing_scRNA_sex, current_sex)
} else {
total_D28_failing <- c(total_D28_failing, aliquot_id)
total_D28_failing_sex <- c(total_D28_failing_sex, current_sex)
}
} else if(aliquot_subject_metadata$multiome == TRUE) {
total_D28_passing_multiome <- c(total_D28_passing_multiome, aliquot_id)
total_D28_passing_multiome_sex <- c(total_D28_passing_multiome_sex, current_sex)
}
}
}
}
print("### BREAKDOWN OF SUBJECTS ###")
# Add scRNA-seq full pass subjects and multiome full pass subjects
print(paste0("Total full pass scRNA subjects (D-1 and D28): ", length(total_full_pass_subjects_scRNA), " (", sum(total_full_pass_subjects_scRNA_sex == "M"), " Male, ", sum(total_full_pass_subjects_scRNA_sex == "F"), " Female)"))
print(paste0("Total full pass multiome subjects (D-1 and D28): ", length(total_full_pass_subjects_multiome), " (", sum(total_full_pass_subjects_multiome_sex == "M"), " Male, ", sum(total_full_pass_subjects_multiome_sex == "F"), " Female)"))
total_full_pass_subjects <- length(total_full_pass_subjects_scRNA) + length(total_full_pass_subjects_multiome)
total_full_pass_subjects_male <- sum(total_full_pass_subjects_scRNA_sex == "M") + sum(total_full_pass_subjects_multiome_sex == "M")
total_full_pass_subjects_female <- sum(total_full_pass_subjects_scRNA_sex == "F") + sum(total_full_pass_subjects_multiome_sex == "F")
print(paste0("total full pass subjects (D-1 and D28): ", total_full_pass_subjects, " (", total_full_pass_subjects_male, " Male, ", total_full_pass_subjects_female, " Female)"))
print("### BREAKDOWN OF ALIQUOTS ###")
print(paste0("D1 passing scRNA: ", length(total_D1_passing_scRNA), " (", sum(total_D1_passing_scRNA_sex == "M"), " Male, ", sum(total_D1_passing_scRNA_sex == "F"), " Female)"))
print(paste0("D1 passing true multiome: ", length(total_D1_passing_multiome), " (", sum(total_D1_passing_multiome_sex == "M"), " Male, ", sum(total_D1_passing_multiome_sex == "F"), " Female)"))
D1_total_passing <- length(total_D1_passing_scRNA) + length(total_D1_passing_multiome)
D1_total_passing_male <- sum(total_D1_passing_scRNA_sex == "M") + sum(total_D1_passing_multiome_sex == "M")
D1_total_passing_female <- sum(total_D1_passing_scRNA_sex == "F") + sum(total_D1_passing_multiome_sex == "F")
print(paste0("total D1 passing: ", D1_total_passing, " (", D1_total_passing_male, " Male, ", D1_total_passing_female, " Female)"))
print(paste0("total D1 failing scRNA: ", length(total_D1_failing), " (", sum(total_D1_failing_sex == "M"), " Male, ", sum(total_D1_failing_sex == "F"), " Female)"))
print(paste0("D28 passing scRNA: ", length(total_D28_passing_scRNA), " (", sum(total_D28_passing_scRNA_sex == "M"), " Male, ", sum(total_D28_passing_scRNA_sex == "F"), " Female)"))
print(paste0("D28 passing true multiome: ", length(total_D28_passing_multiome), " (", sum(total_D28_passing_multiome_sex == "M"), " Male, ", sum(total_D28_passing_multiome_sex == "F"), " Female)"))
D28_total_passing <- length(total_D28_passing_scRNA) + length(total_D28_passing_multiome)
D28_total_passing_male <- sum(total_D28_passing_scRNA_sex == "M") + sum(total_D28_passing_multiome_sex == "M")
D28_total_passing_female <- sum(total_D28_passing_scRNA_sex == "F") + sum(total_D28_passing_multiome_sex == "F")
print(paste0("total D28 passing: ", D28_total_passing, " (", D28_total_passing_male, " Male, ", D28_total_passing_female, " Female)"))
print(paste0("total D28 failing scRNA: ", length(total_D28_failing), " (", sum(total_D28_failing_sex == "M"), " Male, ", sum(total_D28_failing_sex == "F"), " Female)"))
}
find_distribution_of_sc_metadata_for_subjects(high_viral_load_subjects, all_metadata)
find_distribution_of_sc_metadata_for_subjects(low_viral_load_subjects, all_metadata)
library(ArchR)
?filterDoublets
?write.table
library(ArchR)
library(ArchR)
library(stringr)
library(pheatmap)
library(mclust)
library(writexl)
library(ggplot2)
library(hexbin)
library(SeuratDisk)
library(dplyr)
library(openxlsx)
library(BSgenome.Hsapiens.UCSC.hg38)
?filterDoublets
marker_dir <- "C:/Users/willi/Desktop/multiome junk/03-14/markers/"
output_dir <- "C:/Users/willi/Desktop/multiome junk/03-14/markers/UPDATED/"
marker_files <- list.files(marker_dir, pattern = "*.txt$", full.names = TRUE)
for(marker_file in marker_files) {
marker_file_content <- read.table(marker_file)
marker_file_content <- marker_file_content[marker_file_content$avg_log2FC > 0,]
marker_file_content <- marker_file_content[marker_file_content$p_val_adj < 0.05,]
marker_file_content <- marker_file_content[order(marker_file_content$pct.1, decreasing = TRUE),]
write.table(marker_file_content, paste0(output_dir, basename(marker_file)), quote = FALSE, sep = "\t")
}
marker_dir <- "C:/Users/willi/Desktop/multiome junk/03-14/markers/"
output_dir <- "C:/Users/willi/Desktop/multiome junk/03-14/markers/UPDATED/"
marker_files <- list.files(marker_dir, pattern = "*.txt$", full.names = TRUE)
for(marker_file in marker_files) {
marker_file_content <- read.table(marker_file)
marker_file_content <- marker_file_content[marker_file_content$avg_log2FC > 0,]
marker_file_content <- marker_file_content[marker_file_content$p_val_adj < 0.05,]
marker_file_content <- marker_file_content[order(marker_file_content$pct.1, decreasing = TRUE),]
write.table(marker_file_content, paste0(output_dir, basename(marker_file)), quote = FALSE, sep = "\t")
}
marker_files
marker_dir <- "C:/Users/wat2/Desktop/multiome junk/03-14/markers/"
output_dir <- "C:/Users/wat2/Desktop/multiome junk/03-14/markers/UPDATED/"
marker_files <- list.files(marker_dir, pattern = "*.txt$", full.names = TRUE)
for(marker_file in marker_files) {
marker_file_content <- read.table(marker_file)
marker_file_content <- marker_file_content[marker_file_content$avg_log2FC > 0,]
marker_file_content <- marker_file_content[marker_file_content$p_val_adj < 0.05,]
marker_file_content <- marker_file_content[order(marker_file_content$pct.1, decreasing = TRUE),]
write.table(marker_file_content, paste0(output_dir, basename(marker_file)), quote = FALSE, sep = "\t")
}
library(Libra)
devtools::install_github("neurorestore/Libra")
library(Libra)
BiocManager::install("ChIPseeker")
browseVignettes("ChIPseeker")
library("ChIPseeker")
?annotatePeak
peakfile <- system.file("extdata", "sample_peaks.txt", package="ChIPseeker")
peakfile
library(ArchR)
addArchRGenome("hg38")
library(data.table)
library(DESeq2)
library(MetaIntegrator)
# Set up
base_dir <- "~/GitHub/Influenza/"
source(paste0(base_dir, "bulk_RNA_analysis_helper.R"))
source(paste0(base_dir, "pseudobulk_analysis_helper.R"))
source(paste0(base_dir, "Data Compendium/Compendium_Functions.R"))
setup_bulk_analysis()
sample_metadata <- read.table(paste0(base_dir, "sample_metadata.tsv"), sep = "\t", header = TRUE)
cell_types <- c("CD4_Naive", "CD8_Naive", "CD4_Memory", "CD8_Memory", "cDC", "HSPC", "pDC", "Platelet", "Plasmablast", "Proliferating", "NK", "T_Naive", "CD14_Mono", "CD16_Mono", "MAIT")
single_cell_magical_dir <- "C:/Users/wat2/OneDrive - Princeton University/Influenza Analysis/Single Cell RNA-Seq/MAGICAL Analyses/Placebo 6 Sample (Run by Aliza)/"
single_cell_pseudobulk_dir <- paste0(single_cell_magical_dir, "scRNA/pseudo_bulk/")
multiome_magical_dir <- "C:/Users/wat2/OneDrive - Princeton University/Influenza Analysis/True Multiome/MAGICAL Analyses/14 Placebo Sample (Final)/"
multiome_pseudobulk_dir <- paste0(multiome_magical_dir, "scRNA_pseudobulk/")
set.seed(2000)
# Tables containing results for single cell and multiome RNA-seq processing
# Includes genes that passed pseudobulk filtering and genes that passed MAGICAL filtering
# Note that LR includes latent variable subject in differential expression analysis
single_cell_pseudobulk_gene_table <- read.table(paste0(single_cell_magical_dir, "D28_D1_MAGICAL_12_sample_sc_sc_genes.txt"), sep = "\t", header = TRUE)
single_cell_magical_gene_table <- read.table(paste0(single_cell_magical_dir, "D28_D1_MAGICAL_higher_fc_threshold_results.txt"), sep = "\t", header = TRUE)
multiome_pseudobulk_gene_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome_sc_genes.txt"), sep = "\t", header = TRUE)
multiome_magical_gene_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome.txt"), sep = "\t", header = TRUE)
multiome_pseudobulk_gene_LR_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome_sc_genes_LR.txt"), sep = "\t", header = TRUE)
multiome_magical_gene_LR_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome_LR.txt"), sep = "\t", header = TRUE)
# Grab gene lists from result tables and report number of genes
single_cell_pseudobulk_genes <- unique(single_cell_pseudobulk_gene_table$gene)
print(paste0("Number of genes that pass pseudobulk (scRNA): ", length(single_cell_pseudobulk_genes)))
single_cell_magical_genes <- unique(single_cell_magical_gene_table$Gene_symbol)
print(paste0("Number of genes that pass MAGICAL (scRNA): ", length(single_cell_magical_genes)))
multiome_pseudobulk_genes <- unique(multiome_pseudobulk_gene_table$gene)
print(paste0("Number of genes that pass pseudobulk (multiome): ", length(multiome_pseudobulk_genes)))
multiome_magical_genes <- unique(multiome_magical_gene_table$Gene_symbol)
print(paste0("Number of genes that pass MAGICAL (multiome): ", length(multiome_magical_genes)))
multiome_pseudobulk_genes_LR <- unique(multiome_pseudobulk_gene_LR_table$gene)
print(paste0("Number of genes that pass pseudobulk (multiome LR): ", length(multiome_pseudobulk_genes_LR)))
multiome_magical_genes_LR <- unique(multiome_magical_gene_LR_table$Gene_symbol)
print(paste0("Number of genes that pass MAGICAL (multiome LR): ", length(multiome_magical_genes_LR)))
# Create log transformed pseudobulk count tables
single_cell_pseudobulk_counts_log_transformed <- grab_transformed_pseudobulk_counts(single_cell_pseudobulk_dir, cell_types)
multiome_14_pseudobulk_counts_log_transformed <- grab_transformed_pseudobulk_counts(multiome_pseudobulk_dir, cell_types)
# Create MetaIntegrator objects using pseudobulk count tables
single_cell_pseudobulk_metaintegrator_obj <- create_metaintegrator_obj("single cell", single_cell_pseudobulk_counts_log_transformed)
multiome_pseudobulk_metaintegrator_obj <- create_metaintegrator_obj("multiome", multiome_14_pseudobulk_counts_log_transformed)
# Calculate individual AUCs for our gene lists on their respective pseudobulk data
sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(single_cell_pseudobulk_genes, single_cell_pseudobulk_metaintegrator_obj, "Single_Cell_Paired", "sc_pseudobulk"))
curated_sc_pseudobulk_gene_aucs <- sc_pseudobulk_gene_aucs[sc_pseudobulk_gene_aucs$sc_pseudobulk_gene_auc < 0.3 | sc_pseudobulk_gene_aucs$sc_pseudobulk_gene_auc > 0.7,]
curated_single_cell_pseudobulk_genes <- curated_sc_pseudobulk_gene_aucs$gene_name
sc_magical_gene_aucs <- curated_sc_pseudobulk_gene_aucs[curated_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
curated_single_cell_magical_genes <- sc_magical_gene_aucs$gene_name
curated_sc_pseudobulk_gene_aucs
single_cell_pseudobulk_metaintegrator_obj[[1]]$expr
single_cell_pseudobulk_counts_log_transformed
single_cell_pseudobulk_counts_log_transformed[rownames(single_cell_pseudobulk_counts_log_transformed) == "BAG1",]
single_cell_pseudobulk_counts_log_transformed
single_cell_pseudobulk_gene_table
sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(single_cell_pseudobulk_genes, single_cell_pseudobulk_metaintegrator_obj, "Single_Cell_Paired", "sc_pseudobulk"))
sc_pseudobulk_gene_aucs
sc_pseudobulk_gene_aucs[sc_pseudobulk_gene_aucs$gene_name == "BAG1",]
single_cell_pseudobulk_genes
single_cell_magical_genes
sc_pseudobulk_gene_aucs
single_cell_pseudobulk_metaintegrator_obj
sc_pseudobulk_gene_aucs
sc_pseudobulk_gene_aucs[sc_pseudobulk_gene_aucs$gene_name == "BAG1",]
single_cell_pseudobulk_counts_log_transformed
grab_transformed_pseudobulk_counts
single_cell_pseudobulk_counts_log_transformed
single_cell_pseudobulk_counts_log_transformed[rownames(single_cell_pseudobulk_counts_log_transformed) == "BAG1",]
single_cell_pseudobulk_counts_log_transformed
multiome_pseudobulk_gene_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome_sc_genes.txt"), sep = "\t", header = TRUE)
multiome_magical_gene_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome.txt"), sep = "\t", header = TRUE)
multiome_pseudobulk_gene_LR_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome_sc_genes_LR.txt"), sep = "\t", header = TRUE)
multiome_magical_gene_LR_table <- read.table(paste0(multiome_magical_dir, "D28_D1_MAGICAL_14_sample_multiome_LR.txt"), sep = "\t", header = TRUE)
# Grab gene lists from result tables and report number of genes
single_cell_pseudobulk_genes <- unique(single_cell_pseudobulk_gene_table$gene)
print(paste0("Number of genes that pass pseudobulk (scRNA): ", length(single_cell_pseudobulk_genes)))
single_cell_magical_genes <- unique(single_cell_magical_gene_table$Gene_symbol)
print(paste0("Number of genes that pass MAGICAL (scRNA): ", length(single_cell_magical_genes)))
multiome_pseudobulk_genes <- unique(multiome_pseudobulk_gene_table$gene)
print(paste0("Number of genes that pass pseudobulk (multiome): ", length(multiome_pseudobulk_genes)))
multiome_magical_genes <- unique(multiome_magical_gene_table$Gene_symbol)
print(paste0("Number of genes that pass MAGICAL (multiome): ", length(multiome_magical_genes)))
multiome_pseudobulk_genes_LR <- unique(multiome_pseudobulk_gene_LR_table$gene)
print(paste0("Number of genes that pass pseudobulk (multiome LR): ", length(multiome_pseudobulk_genes_LR)))
multiome_magical_genes_LR <- unique(multiome_magical_gene_LR_table$Gene_symbol)
print(paste0("Number of genes that pass MAGICAL (multiome LR): ", length(multiome_magical_genes_LR)))
# Create log transformed pseudobulk count tables
single_cell_pseudobulk_counts_log_transformed <- grab_transformed_pseudobulk_counts(single_cell_pseudobulk_dir, cell_types)
multiome_14_pseudobulk_counts_log_transformed <- grab_transformed_pseudobulk_counts(multiome_pseudobulk_dir, cell_types)
# Create MetaIntegrator objects using pseudobulk count tables
single_cell_pseudobulk_metaintegrator_obj <- create_metaintegrator_obj("single cell", single_cell_pseudobulk_counts_log_transformed)
multiome_pseudobulk_metaintegrator_obj <- create_metaintegrator_obj("multiome", multiome_14_pseudobulk_counts_log_transformed)
# Calculate individual AUCs for our gene lists on their respective pseudobulk data
sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(single_cell_pseudobulk_genes, single_cell_pseudobulk_metaintegrator_obj, "Single_Cell_Paired", "sc_pseudobulk"))
curated_sc_pseudobulk_gene_aucs <- sc_pseudobulk_gene_aucs[sc_pseudobulk_gene_aucs$sc_pseudobulk_gene_auc < 0.3 | sc_pseudobulk_gene_aucs$sc_pseudobulk_gene_auc > 0.7,]
curated_single_cell_pseudobulk_genes <- curated_sc_pseudobulk_gene_aucs$gene_name
sc_magical_gene_aucs <- curated_sc_pseudobulk_gene_aucs[curated_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
curated_single_cell_magical_genes <- sc_magical_gene_aucs$gene_name
multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(multiome_pseudobulk_genes, multiome_pseudobulk_metaintegrator_obj, "Multiome_Paired", "multiome_pseudobulk"))
curated_multiome_pseudobulk_gene_aucs <- multiome_pseudobulk_gene_aucs[multiome_pseudobulk_gene_aucs$multiome_pseudobulk_gene_auc < 0.3 | multiome_pseudobulk_gene_aucs$multiome_pseudobulk_gene_auc > 0.7,]
curated_multiome_pseudobulk_genes <- curated_multiome_pseudobulk_gene_aucs$gene_name
multiome_magical_gene_aucs <- curated_multiome_pseudobulk_gene_aucs[curated_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
curated_multiome_magical_genes <- multiome_magical_gene_aucs$gene_name
# Next, let's test our gene lists on the actual bulk RNA-seq data!
# Test on days 2, 5, 8, and 28 for both pseudobulk gene lists and MAGICAL gene lists
# Should I include the extra samples for days that have them?
# Create MetaIntegrator objects for all days (high and low)
# Remove 0 pcr sample
all_D2_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", placebo_counts, placebo_metadata, "2_D2", "2_D_minus_1")
all_D5_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", placebo_counts, placebo_metadata, "2_D5", "2_D_minus_1")
all_D8_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", placebo_counts, placebo_metadata, "2_D8", "2_D_minus_1")
all_D28_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", placebo_counts, placebo_metadata, "2_D28", "2_D_minus_1")
high_D2_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", high_placebo_counts, high_placebo_metadata, "2_D2", "2_D_minus_1")
high_D5_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", high_placebo_counts, high_placebo_metadata, "2_D5", "2_D_minus_1")
high_D8_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", high_placebo_counts, high_placebo_metadata, "2_D8", "2_D_minus_1")
high_D28_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", high_placebo_counts, high_placebo_metadata, "2_D28", "2_D_minus_1")
low_D2_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", low_placebo_counts, low_placebo_metadata, "2_D2", "2_D_minus_1")
low_D5_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", low_placebo_counts, low_placebo_metadata, "2_D5", "2_D_minus_1")
low_D8_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", low_placebo_counts, low_placebo_metadata, "2_D8", "2_D_minus_1")
low_D28_bulk_metaintegrator_obj <- create_metaintegrator_obj("bulk", low_placebo_counts, low_placebo_metadata, "2_D28", "2_D_minus_1")
# Calculate gene AUCs for pseudobulk filtered genes (high and low) - single cell
all_bulk_D2_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, all_D2_bulk_metaintegrator_obj, "Single_Cell_Paired", "all_bulk_D2"))
all_bulk_D5_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, all_D5_bulk_metaintegrator_obj, "Single_Cell_Paired", "all_bulk_D5"))
all_bulk_D8_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, all_D8_bulk_metaintegrator_obj, "Single_Cell_Paired", "all_bulk_D8"))
all_bulk_D28_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, all_D28_bulk_metaintegrator_obj, "Single_Cell_Paired", "all_bulk_D28"))
high_bulk_D2_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, high_D2_bulk_metaintegrator_obj, "Single_Cell_Paired", "high_bulk_D2"))
high_bulk_D5_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, high_D5_bulk_metaintegrator_obj, "Single_Cell_Paired", "high_bulk_D5"))
high_bulk_D8_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, high_D8_bulk_metaintegrator_obj, "Single_Cell_Paired", "high_bulk_D8"))
high_bulk_D28_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, high_D28_bulk_metaintegrator_obj, "Single_Cell_Paired", "high_bulk_D28"))
low_bulk_D2_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, low_D2_bulk_metaintegrator_obj, "Single_Cell_Paired", "low_bulk_D2"))
low_bulk_D5_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, low_D5_bulk_metaintegrator_obj, "Single_Cell_Paired", "low_bulk_D5"))
low_bulk_D8_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, low_D8_bulk_metaintegrator_obj, "Single_Cell_Paired", "low_bulk_D8"))
low_bulk_D28_sc_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_single_cell_pseudobulk_genes, low_D28_bulk_metaintegrator_obj, "Single_Cell_Paired", "low_bulk_D28"))
# Calculate gene AUCs for MAGICAL filtered genes (high and low) - single cell
all_bulk_D2_sc_magical_gene_aucs <- all_bulk_D2_sc_pseudobulk_gene_aucs[all_bulk_D2_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
all_bulk_D5_sc_magical_gene_aucs <- all_bulk_D5_sc_pseudobulk_gene_aucs[all_bulk_D5_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
all_bulk_D8_sc_magical_gene_aucs <- all_bulk_D8_sc_pseudobulk_gene_aucs[all_bulk_D8_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
all_bulk_D28_sc_magical_gene_aucs <- all_bulk_D28_sc_pseudobulk_gene_aucs[all_bulk_D28_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
high_bulk_D2_sc_magical_gene_aucs <- high_bulk_D2_sc_pseudobulk_gene_aucs[high_bulk_D2_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
high_bulk_D5_sc_magical_gene_aucs <- high_bulk_D5_sc_pseudobulk_gene_aucs[high_bulk_D5_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
high_bulk_D8_sc_magical_gene_aucs <- high_bulk_D8_sc_pseudobulk_gene_aucs[high_bulk_D8_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
high_bulk_D28_sc_magical_gene_aucs <- high_bulk_D28_sc_pseudobulk_gene_aucs[high_bulk_D28_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
low_bulk_D2_sc_magical_gene_aucs <- low_bulk_D2_sc_pseudobulk_gene_aucs[low_bulk_D2_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
low_bulk_D5_sc_magical_gene_aucs <- low_bulk_D5_sc_pseudobulk_gene_aucs[low_bulk_D5_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
low_bulk_D8_sc_magical_gene_aucs <- low_bulk_D8_sc_pseudobulk_gene_aucs[low_bulk_D8_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
low_bulk_D28_sc_magical_gene_aucs <- low_bulk_D28_sc_pseudobulk_gene_aucs[low_bulk_D28_sc_pseudobulk_gene_aucs$gene_name %in% single_cell_magical_genes,]
# Calculate gene AUCs for pseudobulk filtered genes (high and low) - multiome
all_bulk_D2_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, all_D2_bulk_metaintegrator_obj, "Multiome_Paired", "all_bulk_D2"))
all_bulk_D5_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, all_D5_bulk_metaintegrator_obj, "Multiome_Paired", "all_bulk_D5"))
all_bulk_D8_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, all_D8_bulk_metaintegrator_obj, "Multiome_Paired", "all_bulk_D8"))
all_bulk_D28_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, all_D28_bulk_metaintegrator_obj, "Multiome_Paired", "all_bulk_D28"))
high_bulk_D2_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, high_D2_bulk_metaintegrator_obj, "Multiome_Paired", "high_bulk_D2"))
high_bulk_D5_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, high_D5_bulk_metaintegrator_obj, "Multiome_Paired", "high_bulk_D5"))
high_bulk_D8_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, high_D8_bulk_metaintegrator_obj, "Multiome_Paired", "high_bulk_D8"))
high_bulk_D28_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, high_D28_bulk_metaintegrator_obj, "Multiome_Paired", "high_bulk_D28"))
low_bulk_D2_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, low_D2_bulk_metaintegrator_obj, "Multiome_Paired", "low_bulk_D2"))
low_bulk_D5_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, low_D5_bulk_metaintegrator_obj, "Multiome_Paired", "low_bulk_D5"))
low_bulk_D8_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, low_D8_bulk_metaintegrator_obj, "Multiome_Paired", "low_bulk_D8"))
low_bulk_D28_multiome_pseudobulk_gene_aucs <- na.omit(test_individual_genes_on_datasets(curated_multiome_pseudobulk_genes, low_D28_bulk_metaintegrator_obj, "Multiome_Paired", "low_bulk_D28"))
# Calculate gene AUCs for MAGICAL filtered genes (high and low) - multiome
all_bulk_D2_multiome_magical_gene_aucs <- all_bulk_D2_multiome_pseudobulk_gene_aucs[all_bulk_D2_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
all_bulk_D5_multiome_magical_gene_aucs <- all_bulk_D5_multiome_pseudobulk_gene_aucs[all_bulk_D5_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
all_bulk_D8_multiome_magical_gene_aucs <- all_bulk_D8_multiome_pseudobulk_gene_aucs[all_bulk_D8_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
all_bulk_D28_multiome_magical_gene_aucs <- all_bulk_D28_multiome_pseudobulk_gene_aucs[all_bulk_D28_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
high_bulk_D2_multiome_magical_gene_aucs <- high_bulk_D2_multiome_pseudobulk_gene_aucs[high_bulk_D2_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
high_bulk_D5_multiome_magical_gene_aucs <- high_bulk_D5_multiome_pseudobulk_gene_aucs[high_bulk_D5_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
high_bulk_D8_multiome_magical_gene_aucs <- high_bulk_D8_multiome_pseudobulk_gene_aucs[high_bulk_D8_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
high_bulk_D28_multiome_magical_gene_aucs <- high_bulk_D28_multiome_pseudobulk_gene_aucs[high_bulk_D28_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
low_bulk_D2_multiome_magical_gene_aucs <- low_bulk_D2_multiome_pseudobulk_gene_aucs[low_bulk_D2_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
low_bulk_D5_multiome_magical_gene_aucs <- low_bulk_D5_multiome_pseudobulk_gene_aucs[low_bulk_D5_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
low_bulk_D8_multiome_magical_gene_aucs <- low_bulk_D8_multiome_pseudobulk_gene_aucs[low_bulk_D8_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
low_bulk_D28_multiome_magical_gene_aucs <- low_bulk_D28_multiome_pseudobulk_gene_aucs[low_bulk_D28_multiome_pseudobulk_gene_aucs$gene_name %in% multiome_magical_genes,]
# Because of the way we calculate AUC, in our case an AUC of under 0.3 is equally valuable as AUC of over 0.7
# Above, we test genes one at a time as positive genes in our gene set signature
# If we get an AUC of under 0.3, that means that the same gene would score an AUC of over 0.7 as a negative gene
# in our gene set signature
# Why are there more genes that pass AUC in D28 vs days 2/5/8 for low? Must be because I'm training on low D28 data, right?
# Are the genes that pass AUC 0.7 (or AUC 0.3) differentially expressed in bulk data?
auc_df <- data.frame(Filtering_Assay = character(), Filtering_Method = character(), Discovery_Assay = character(),
Discovery_Dataset = character(), Pos_Genes = integer(), Neg_Genes = integer(), Total_Passing_Genes = integer(),
Total_Genes = integer(), Percentage_of_Passing_Genes = double(), stringsAsFactors = FALSE)
auc_names <- c("Filtering_Assay", "Filtering_Method", "Discovery_Assay", "Discovery_Dataset", "Pos_Genes", "Neg_Genes", "Total_Passing_Genes", "Total_Genes", "Percentage_of_Passing_Genes")
# Single cell, cell type pseudobulk filtering
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Single Cell", "Total Pseudobulk", curated_sc_pseudobulk_gene_aucs, "sc_pseudobulk_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D2", all_bulk_D2_sc_pseudobulk_gene_aucs, "all_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D5", all_bulk_D5_sc_pseudobulk_gene_aucs, "all_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D8", all_bulk_D8_sc_pseudobulk_gene_aucs, "all_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D28", all_bulk_D28_sc_pseudobulk_gene_aucs, "all_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D2", high_bulk_D2_sc_pseudobulk_gene_aucs, "high_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D5", high_bulk_D5_sc_pseudobulk_gene_aucs, "high_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D8", high_bulk_D8_sc_pseudobulk_gene_aucs, "high_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D28", high_bulk_D28_sc_pseudobulk_gene_aucs, "high_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D2", low_bulk_D2_sc_pseudobulk_gene_aucs, "low_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D5", low_bulk_D5_sc_pseudobulk_gene_aucs, "low_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D8", low_bulk_D8_sc_pseudobulk_gene_aucs, "low_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D28", low_bulk_D28_sc_pseudobulk_gene_aucs, "low_bulk_D28_gene_auc")
# Single cell, MAGICAL filtering
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Single Cell", "Total Pseudobulk", curated_sc_magical_gene_aucs, "sc_pseudobulk_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "All Bulk D2", all_bulk_D2_sc_magical_gene_aucs, "all_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "All Bulk D5", all_bulk_D5_sc_magical_gene_aucs, "all_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "All Bulk D8", all_bulk_D8_sc_magical_gene_aucs, "all_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "All Bulk D28", all_bulk_D28_sc_magical_gene_aucs, "all_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "High Bulk D2", high_bulk_D2_sc_magical_gene_aucs, "high_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "High Bulk D5", high_bulk_D5_sc_magical_gene_aucs, "high_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "High Bulk D8", high_bulk_D8_sc_magical_gene_aucs, "high_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "High Bulk D28", high_bulk_D28_sc_magical_gene_aucs, "high_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D2", low_bulk_D2_sc_magical_gene_aucs, "low_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D5", low_bulk_D5_sc_magical_gene_aucs, "low_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D8", low_bulk_D8_sc_magical_gene_aucs, "low_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Single Cell", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D28", low_bulk_D28_sc_magical_gene_aucs, "low_bulk_D28_gene_auc")
# Multiome, cell type pseudobulk filtering
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Multiome", "Total Pseudobulk", curated_multiome_pseudobulk_gene_aucs, "multiome_pseudobulk_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D2", all_bulk_D2_multiome_pseudobulk_gene_aucs, "all_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D5", all_bulk_D5_multiome_pseudobulk_gene_aucs, "all_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D8", all_bulk_D8_multiome_pseudobulk_gene_aucs, "all_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "All Bulk D28", all_bulk_D28_multiome_pseudobulk_gene_aucs, "all_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D2", high_bulk_D2_multiome_pseudobulk_gene_aucs, "high_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D5", high_bulk_D5_multiome_pseudobulk_gene_aucs, "high_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D8", high_bulk_D8_multiome_pseudobulk_gene_aucs, "high_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "High Bulk D28", high_bulk_D28_multiome_pseudobulk_gene_aucs, "high_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D2", low_bulk_D2_multiome_pseudobulk_gene_aucs, "low_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D5", low_bulk_D5_multiome_pseudobulk_gene_aucs, "low_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D8", low_bulk_D8_multiome_pseudobulk_gene_aucs, "low_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "Cell Type Pseudobulk", "Bulk RNA-Seq", "Low Bulk D28", low_bulk_D28_multiome_pseudobulk_gene_aucs, "low_bulk_D28_gene_auc")
# Multiome, MAGICAL filtering
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Multiome", "Total Pseudobulk", curated_multiome_magical_gene_aucs, "multiome_pseudobulk_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "All Bulk D2", all_bulk_D2_multiome_magical_gene_aucs, "all_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "All Bulk D5", all_bulk_D5_multiome_magical_gene_aucs, "all_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "All Bulk D8", all_bulk_D8_multiome_magical_gene_aucs, "all_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "All Bulk D28", all_bulk_D28_multiome_magical_gene_aucs, "all_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "High Bulk D2", high_bulk_D2_multiome_magical_gene_aucs, "high_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "High Bulk D5", high_bulk_D5_multiome_magical_gene_aucs, "high_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "High Bulk D8", high_bulk_D8_multiome_magical_gene_aucs, "high_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "High Bulk D28", high_bulk_D28_multiome_magical_gene_aucs, "high_bulk_D28_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D2", low_bulk_D2_multiome_magical_gene_aucs, "low_bulk_D2_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D5", low_bulk_D5_multiome_magical_gene_aucs, "low_bulk_D5_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D8", low_bulk_D8_multiome_magical_gene_aucs, "low_bulk_D8_gene_auc")
auc_df <- add_auc_row(auc_df, auc_names, "Multiome", "MAGICAL", "Bulk RNA-Seq", "Low Bulk D28", low_bulk_D28_multiome_magical_gene_aucs, "low_bulk_D28_gene_auc")
high_placebo_period_2_LRT_metadata <- high_placebo_metadata[high_placebo_metadata$time_point == "2_D28" | high_placebo_metadata$time_point == "2_D8" |
high_placebo_metadata$time_point == "2_D5" | high_placebo_metadata$time_point == "2_D2" |
high_placebo_metadata$time_point == "2_D_minus_1",]
high_placebo_period_2_LRT_metadata <- high_placebo_period_2_LRT_metadata[high_placebo_period_2_LRT_metadata$subject_id
%in% names(table(high_placebo_period_2_LRT_metadata$subject_id)
[table(high_placebo_period_2_LRT_metadata$subject_id) == 5]),]
high_placebo_period_2_LRT_counts <- high_placebo_counts[rownames(high_placebo_period_2_LRT_metadata)]
high_placebo_period_2_LRT_analysis <- DESeqDataSetFromMatrix(countData = high_placebo_period_2_LRT_counts,
colData = high_placebo_period_2_LRT_metadata,
design = ~ subject_id + time_point)
high_placebo_period_2_LRT_analysis <- DESeq(high_placebo_period_2_LRT_analysis, test = "LRT", reduced = ~ subject_id)
high_placebo_period_2_LRT_analysis_results <- results(high_placebo_period_2_LRT_analysis, alpha = 0.05)
high_placebo_period_2_LRT_analysis_results <- high_placebo_period_2_LRT_analysis_results[order(high_placebo_period_2_LRT_analysis_results$padj),]
high_placebo_period_2_LRT_analysis_results <- subset(high_placebo_period_2_LRT_analysis_results, padj < 0.05)
high_sc_pos_genes <- sc_pseudobulk_gene_aucs[sc_pseudobulk_gene_aucs$sc_pseudobulk_gene_auc > 0.7,]$gene_name
high_sc_pos_genes
high_magical_pos_genes <- sc_magical_gene_aucs[sc_magical_gene_aucs$sc_pseudobulk_gene_auc > 0.7,]$gene_name
# See which of these genes are significant in LRT data
high_sc_pos_genes_LRT_pass <- c()
for(gene in high_sc_pos_genes) {
if(gene %in% rownames(high_placebo_period_2_LRT_analysis_results)) {
high_sc_pos_genes_LRT_pass <- c(high_sc_pos_genes_LRT_pass, gene)
}
}
high_sc_pos_genes_LRT_pass
high_placebo_period_2_LRT_analysis_betas <- coef(high_placebo_period_2_LRT_analysis)
high_placebo_period_2_LRT_analysis_betas <- high_placebo_period_2_LRT_analysis_betas[, -c(1:13)]
high_placebo_period_2_LRT_analysis_betas <- high_placebo_period_2_LRT_analysis_betas[rownames(high_placebo_period_2_LRT_analysis_betas) %in% high_sc_pos_genes_LRT_pass,]
high_placebo_period_2_LRT_analysis_betas
min(high_placebo_period_2_LRT_analysis_betas)
max(high_placebo_period_2_LRT_analysis_betas)
high_placebo_period_2_LRT_analysis_thr <- 2
colnames(high_placebo_period_2_LRT_analysis_betas) <- c("Day 2 vs Day -1", "Day 5 vs Day -1", "Day 8 vs Day -1", "Day 28 vs Day -1")
pheatmap(high_placebo_period_2_LRT_analysis_betas, breaks=seq(from=-high_placebo_period_2_LRT_analysis_thr, to=high_placebo_period_2_LRT_analysis_thr, length=101),
cluster_col=FALSE, fontsize_col=14)
library(pheatmap)
high_placebo_period_2_LRT_analysis_thr <- 2
colnames(high_placebo_period_2_LRT_analysis_betas) <- c("Day 2 vs Day -1", "Day 5 vs Day -1", "Day 8 vs Day -1", "Day 28 vs Day -1")
pheatmap(high_placebo_period_2_LRT_analysis_betas, breaks=seq(from=-high_placebo_period_2_LRT_analysis_thr, to=high_placebo_period_2_LRT_analysis_thr, length=101),
cluster_col=FALSE, fontsize_col=14)
sc_pseudobulk_gene_aucs
high_sc_pos_genes_LRT_pass
"IL10RA" %in% high_sc_pos_genes_LRT_pass
high_placebo_period_2_LRT_analysis_betas
high_placebo_period_2_LRT_analysis_betas[rownames(high_placebo_period_2_LRT_analysis_betas) == "IL10RA"]
high_placebo_period_2_LRT_analysis_betas[rownames(high_placebo_period_2_LRT_analysis_betas) == "IL10RA",]
auc_df
nrow(sc_pseudobulk_gene_aucs)
nrow(curated_sc_pseudobulk_gene_aucs)
high_sc_neg_genes <- sc_pseudobulk_gene_aucs[sc_pseudobulk_gene_aucs$sc_pseudobulk_gene_auc < 0.3,]$gene_name
# See which of these genes are significant in LRT data
high_sc_neg_genes_LRT_pass <- c()
for(gene in high_sc_neg_genes) {
if(gene %in% rownames(high_placebo_period_2_LRT_analysis_results)) {
high_sc_neg_genes_LRT_pass <- c(high_sc_neg_genes_LRT_pass, gene)
}
}
high_sc_neg_genes_LRT_pass
high_placebo_period_2_LRT_analysis_betas_neg <- coef(high_placebo_period_2_LRT_analysis)
high_placebo_period_2_LRT_analysis_betas_neg <- high_placebo_period_2_LRT_analysis_betas_neg[, -c(1:13)]
high_placebo_period_2_LRT_analysis_betas_neg <- high_placebo_period_2_LRT_analysis_betas_neg[rownames(high_placebo_period_2_LRT_analysis_betas_neg) %in% high_sc_neg_genes_LRT_pass,]
colnames(high_placebo_period_2_LRT_analysis_betas_neg) <- c("Day 2 vs Day -1", "Day 5 vs Day -1", "Day 8 vs Day -1", "Day 28 vs Day -1")
pheatmap(high_placebo_period_2_LRT_analysis_betas_neg, breaks=seq(from=-1, to=1, length=101),
cluster_col=FALSE, fontsize_col=14)
high_placebo_period_2_LRT_analysis_betas_neg
high_sc_neg_genes
sc_pseudobulk_gene_aucs[sc_pseudobulk_gene_aucs$gene_name == "FOSB",]
high_bulk_D28_multiome_magical_gene_aucs
high_D28_bulk_metaintegrator_obj
high_bulk_D28_sc_pseudobulk_gene_aucs
high_bulk_D28_sc_pseudobulk_gene_aucs[high_bulk_D28_sc_pseudobulk_gene_aucs$gene_name == "FOSB",]
high_bulk_D8_sc_pseudobulk_gene_aucs[high_bulk_D8_sc_pseudobulk_gene_aucs$gene_name == "FOSB",]
high_bulk_D2_sc_pseudobulk_gene_aucs[high_bulk_D2_sc_pseudobulk_gene_aucs$gene_name == "FOSB",]
high_bulk_D5_sc_pseudobulk_gene_aucs[high_bulk_D5_sc_pseudobulk_gene_aucs$gene_name == "FOSB",]
high_bulk_D2_sc_pseudobulk_gene_aucs[high_bulk_D5_sc_pseudobulk_gene_aucs$gene_name == "BAG1",]
high_bulk_D28_sc_pseudobulk_gene_aucs[high_bulk_D5_sc_pseudobulk_gene_aucs$gene_name == "BAG1",]
