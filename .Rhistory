?read.csv
sample_metadata <- read.csv("C:/Users/wat2/Documents/GitHub/Influenza/current_sample_metadata_minus_8d5be1a4937a7ad3.csv")
sample_metadata$sample_id
?paste0
list.dirs("C:/Users/wat2/Desktop/Influenza/snRNA_seq/")
list.dirs("C:/Users/wat2/Desktop/Influenza/snRNA_seq/", recursive = False)
list.dirs("C:/Users/wat2/Desktop/Influenza/snRNA_seq/", recursive = FALSE)
list.dirs("C:/Users/wat2/Desktop/Influenza/snRNA_seq", recursive = FALSE)
base_snRNA_seq_dir = "C:/Users/wat2/Desktop/Influenza/snRNA_seq"
snRNA_seq_aliquot_names <- list.dirs(base_snRNA_seq_dir, recursive = FALSE)
snRNA_seq_aliquot_names
snRNA_seq_aliquot_names[1]
snRNA_seq_aliquot_names[1].split("/")
snRNA_seq_aliquot_names[1].split()
?strsplit
strsplit(snRNA_seq_aliquot_names[1], "/")
snRNA_seq_aliquot_names <- list.dirs(base_snRNA_seq_dir, recursive = FALSE)
snRNA_seq_aliquot_names
strsplit(snRNA_seq_aliquot_names)
strsplit(snRNA_seq_aliquot_names, "/")
snRNA_seq_aliquot_names
sapply(snRNA_seq_aliquot_names, tail, 1)
snRNA_seq_aliquot_names
snRNA_seq_aliquot_names <- strsplit(snRNA_seq_aliquot_names, "/")
snRNA_seq_aliquot_names
snRNA_seq_aliquot_names
install.packages(c("httr", "rmarkdown", "RSQLite", "tinytex", "uwot"))
install.packages("gert")
?FindClusters
library(Seurat)
?FindClusters
?FindClusters
seq(0,1,0.1)
for res in seq(0, 1, 0.1) {
for (res in seq(0, 1, 0.1)) {
print(res)
}
test = df()
test = df()
library(dplyr)
library(Seurat)
library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/williamthistle/Desktop/seurat_tutorial_data/")
library(dplyr)
library(Seurat)
library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/williamthistle/Desktop/seurat_tutorial_data/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
library(dplyr)
library(Seurat)
library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/williamthistle/Desktop/seurat_tutorial_data/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
pbmc$"blah.res" = pbmc$seurat_clusters
pbmc
pbmc[[]]
test = "blah.res"
pbmc$test = pbmc$seurat_clusters
pbmc$paste0("blah", "res") = pbmc$seurat_clusters
pbmc$paste0("blah", ".res") = pbmc$seurat_clusters
"test " + 5
"test " + "5"
"test 5"
?assign
pbmc$test
names(pbmc)
pbmc
names(pbmc[[]])
names(pbmc[[]])[-1]
names(pbmc[[]])[1]
names(pbmc[[]])
names(pbmc[[]])
names(pbmc[[]])[length(pbmc[[]])]
names(pbmc[[]])[length(pbmc[[]])] <- paste0("hi", "Hello")
names(pbmc[[]])[length(pbmc[[]])]
names(pbmc[[]])[length(pbmc[[]])] <- "test2"
names(pbmc[[]])[length(pbmc[[]])]
names(pbmc[[]])
names(pbmc[[]])[1] <- "Test"
names(pbmc[[]])[1]
blah = "Test"
names(pbmc[[]])[1] <- blah
class(pbmc[[]])
x = rnorm(10)
y = 'z'
df <- data.frame(assign(y, x))
names(df)[1] <- y
df
df
x
y
df <- data.frame(assign(y, x))
df
df <- data.frame(assign(y, x))
df
y
x
names(df)
names(df) <- "y"
df
df <- data.frame(assign(y, x))
df
names(df)[1] <- "y"
df
names(pbmc)[1]
names(pbmc)[2]
names(pbmc)[3]
names(pbmc)[4]
names(pbmc)[5]
class(pbmc[[]])
class(pbmc)
class(pbmc[[]])
pbmc[[]]
names(pbmc[[]])
names(pbmc[[]])[1]
names(pbmc[[]])[1] <- "test"
names(pbmc[[]])[2] <- "test"
names(pbmc[[]])[1]
?assign
pbmc$test
?rename
pbmc$test
rename(pbmc, test = aardvark)
library(dplyr)
rename(pbmc, test = aardvark)
rename(pbmc[[[]]], test = aardvark)
rename(pbmc[[]], test = aardvark)
names(pbmc[[]])[names(pbmc)==”test”] <- “aardvark”
names(pbmc[[]])[names(pbmc)==”test”] <- “aardvark”
names(pbmc[[]])[names(pbmc[[]])==”A”] <- “B”
pbmc[[]]
names(pbmc[[]])[names(pbmc[[]])==”A”] <- “B”
names(pbmc[[]])
names(pbmc[[]])[names(pbmc[[]])==”A”]
names(pbmc[[]])[names(pbmc[[]])==”A”]
names(pbmc[[]])[names(pbmc[[]])==”test”]
names(pbmc[[]])[names(pbmc[[]])==”test”,]
names(pbmc[[]])[names(pbmc[[]])==”test”]
names(pbmc[[]])
names(pbmc[[]])[5]
names(pbmc[[]])[names(pbmc[[]])]
names(pbmc[[]])[names(pbmc[[]])]
names(pbmc[[]])[names(pbmc[[]]) == "orig.ident"]
names(pbmc[[]])[names(pbmc[[]]) == "test"]
names(pbmc[[]])[names(pbmc[[]]) == "test"] <- "aardvark"
rename(pbmc[[]], "aardvark" = "test")
install.packages(c("hms", "patchwork", "pillar", "RcppArmadillo", "scales"))
?LoadH5Seurat
